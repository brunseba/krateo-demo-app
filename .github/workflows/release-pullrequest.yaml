name: release-pullrequest

on:
  pull_request:
    branches:
      - main

jobs:
  package:
    runs-on: ubuntu-latest

    steps:
      - name: Extract and Store Trimmed Repository Name
        run: |
          REPO_CHART_NAME="${{ github.repository }}"
          REPO_APP_NAME=$(echo "$REPO_CHART_NAME" | sed 's/-chart$//')  # Remove "-chart" suffix if present
          
          # Check if the trimmed repo exists
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO_APP_NAME")

          if [[ "$HTTP_STATUS" -eq 200 ]]; then
            echo "Using trimmed repository name: $REPO_APP_NAME"
            echo "REPO_APP_NAME=$REPO_APP_NAME" >> $GITHUB_ENV
          else
            echo "Trimmed repository not found. Falling back to original repository name."
            echo "REPO_APP_NAME=$REPO_CHART_NAME" >> $GITHUB_ENV
          fi

      - name: Use the Stored Variable
        run: |
          echo "Trimmed Repository Name: ${{ env.REPO_APP_NAME }}"

      - name: Set GitHub Token
        id: authenticate
        run: |
          echo "token=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT

      - name: Extract latest App Version
        id: chart_version
        run: |
          # Try to get the latest tag, fallback to 0.1.0 if no tags exist
          LATEST_TAG=$(git tag --sort=-version:refname | head -n1 || echo "0.1.0")
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="0.1.0"
          fi
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest chart version: $LATEST_TAG"

      - name: Extract latest Chart Version
        id: app_version
        run: |
          # For now, use the same version as chart version
          # In a real scenario, this would check a separate app repository
          LATEST_TAG=$(git tag --sort=-version:refname | head -n1 || echo "1.0.0")
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="1.0.0"
          fi
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest app version: $LATEST_TAG"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Print Version
        run: |
          echo APP_VERSION:${{steps.app_version.outputs.tag}}
          echo CHART_VERSION:${{steps.chart_version.outputs.tag}}

      - name: Update Chart.yaml versions
        run: |
          # Update chart version
          sed -i "s/version: .*/version: ${{ steps.chart_version.outputs.tag }}/g" ./chart/Chart.yaml
          # Update app version
          sed -i "s/appVersion: .*/appVersion: \"${{ steps.app_version.outputs.tag }}\"/g" ./chart/Chart.yaml
          echo "Updated Chart.yaml:"
          cat ./chart/Chart.yaml

      - name: Set up Helm
        uses: azure/setup-helm@v4.1.0

      - name: Helm lint
        run: helm lint ./chart
